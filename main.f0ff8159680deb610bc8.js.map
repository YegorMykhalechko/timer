{"version":3,"sources":["webpack:///./index.js","webpack:///./js/classTimer.js"],"names":["timer","selector","targetDate","this","document","querySelector","updateTimer","start","id","setInterval","currentTime","Date","now","time","secs","Math","floor","mins","hours","days","stop","clearInterval","updateModal","modal","classList","add","modalClose","remove","addEventListener","window","removeEventListener","sec","min","hour","day","textContent"],"mappings":"uIAIMA,EAAQ,I,WCFV,cAAsC,IAAxBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACpBC,KAAKF,SAAWG,SAASC,cAAcJ,GACvCE,KAAKD,WAAaA,EAClBC,KAAKG,YAAY,KAAM,KAAM,KAAM,M,2BAEvCC,MAAA,WAAQ,WACJJ,KAAKK,GAAKC,aAAY,WAClB,IAAMC,EAAcC,KAAKC,MACnBC,EAAO,EAAKX,WAAaQ,EACzBI,EAAOC,KAAKC,MAAOH,EAAO,IAAe,KACzCI,EAAOF,KAAKC,MAAOH,EAAO,KAAR,KAClBK,EAAQH,KAAKC,MAAOH,EAAO,MAAR,MACnBM,EAAOJ,KAAKC,MAAMH,EAAO,OAC/B,EAAKP,YAAYQ,EAAMG,EAAMC,EAAOC,KACrC,M,EAGPC,KAAA,WACI,IAAMV,EAAcC,KAAKC,MACrBF,IAAgBP,KAAKD,YACrBmB,cAAclB,KAAKK,IAGnBE,EAAcP,KAAKD,aACnBmB,cAAclB,KAAKK,IACnBL,KAAKmB,gB,EAIbA,YAAA,WACI,IAAMC,EAAQnB,SAASC,cAAc,aACrCkB,EAAMC,UAAUC,IAAI,WACLrB,SAASC,cAAc,qBAAtC,IACMqB,EAAa,kBAAMH,EAAMC,UAAUG,OAAO,YACrCvB,SAASwB,iBAAiB,QAASF,GAC9CG,OAAOC,oBAAoB,QAASJ,I,EAGxCpB,YAAA,SAAYyB,EAAKC,EAAKC,EAAMC,GACxB,IAAMpB,EAAOV,SAASC,cAAc,uBAC9BY,EAAOb,SAASC,cAAc,uBAC9Ba,EAAQd,SAASC,cAAc,wBAC/Bc,EAAOf,SAASC,cAAc,uBACpCS,EAAKqB,YAAcJ,EACnBd,EAAKkB,YAAcH,EACnBd,EAAMiB,YAAcF,EACpBd,EAAKgB,YAAcD,G,KD5Cb,CAAmB,CAC7BjC,SAAU,WACVC,WAAY,IAAIS,KAAK,kBAEzBX,EAAMO,QACNP,EAAMoB,S","file":"main.f0ff8159680deb610bc8.js","sourcesContent":["'use strict'\r\nimport './styles.css';\r\nimport CountdownTimer from './js/classTimer.js';\r\n\r\nconst timer = new CountdownTimer({\r\n    selector: '#timer-1',\r\n    targetDate: new Date('Apr 15, 2022'),\r\n});\r\ntimer.start();\r\ntimer.stop();\r\n\r\n\r\n\r\n","'use strict'\r\nexport default class CountdownTimer {\r\n    constructor({ selector, targetDate }) {\r\n        this.selector = document.querySelector(selector);\r\n        this.targetDate = targetDate;\r\n        this.updateTimer('00', '00', '00', '00');\r\n    };\r\n    start() {\r\n        this.id = setInterval(() => {\r\n            const currentTime = Date.now();\r\n            const time = this.targetDate - currentTime;\r\n            const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n            const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n            const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n            const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n            this.updateTimer(secs, mins, hours, days);\r\n        }, 1000);\r\n    };\r\n\r\n    stop() {\r\n        const currentTime = Date.now();\r\n        if (currentTime === this.targetDate) {\r\n            clearInterval(this.id); \r\n        };\r\n\r\n        if (currentTime > this.targetDate) {\r\n            clearInterval(this.id);\r\n            this.updateModal();\r\n        };\r\n    };\r\n\r\n    updateModal() {\r\n        const modal = document.querySelector('.lightbox');\r\n        modal.classList.add('is-open');\r\n        let btnClose = document.querySelector('.lightbox__button');\r\n        const modalClose = () => modal.classList.remove('is-open');\r\n        btnClose = document.addEventListener('click', modalClose);\r\n        window.removeEventListener('click', modalClose);\r\n    };\r\n\r\n    updateTimer(sec, min, hour, day) {\r\n        const secs = document.querySelector('[data-value=\"secs\"]');\r\n        const mins = document.querySelector('[data-value=\"mins\"]');\r\n        const hours = document.querySelector('[data-value=\"hours\"]');\r\n        const days = document.querySelector('[data-value=\"days\"]');\r\n        secs.textContent = sec;\r\n        mins.textContent = min;\r\n        hours.textContent = hour;\r\n        days.textContent = day;\r\n    };\r\n};"],"sourceRoot":""}